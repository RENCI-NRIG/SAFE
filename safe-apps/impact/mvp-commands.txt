
//Run server on port 7777:
sbt "project safe-server" "run -f ../safe-apps/impact/mvp.slang -r safeService  -kd  ~/safe-scratch/principalkeys"

//Run slang-shell client:
sbt "project safe-lang" "run"

----------------------
Slang-shell commands
----------------------

import("safe-apps/impact/mvp-client.slang").
?ServerJVM := "localhost:7777".

?Self := "strong-1".
?WP := postRawIdSet("strong-1").
?Self := "strong-2".
?DSO := postRawIdSet("strong-2").
?Self := "strong-3".
?NSV := postRawIdSet("strong-3").
?Self := "strong-4".
?DP := postRawIdSet("strong-4").

?UUID1 := "6ec7211c-caaf-4e00-ad36-0cd413accc91".
?UUID2 := "1b924687-a317-4bd7-a54f-a5a0151f49d3".
?UUID3 := "26dbc728-3c8d-4433-9c4b-2e065b644db5".

?WF1 := "$WP:$UUID1".
?WF2 := "$WP:$UUID2".
?DataSet := "$DSO:$UUID3".

// Workflow Publisher: post completion rules for workflows
?Self := $WP.
?PFR1 := postPerFlowRule($WF1).
?PFR2 := postPerFlowRule($WF2).

// Data Set Owner: post policy for dataset access
?Self := $DSO.
?DSOP := postTwoFlowDataOwnerPolicy($DataSet, $WF1, $WF2).

// Notary Service: post completion receipts for both workflows.
?Self := $NSV.
?NSCCR1 := postCommonCompletionReceipt("someProject", $WF1).
?NSUCR1 := postUserCompletionReceipt("someUser", "someProject", $WF1).
?NSLR1 := postLinkReceiptForDataset("someUser", "someProject", $DataSet, $WF1).
?NSCCR2 := postCommonCompletionReceipt("someProject", $WF2).
?NSUCR2 := postUserCompletionReceipt("someUser", "someProject", $WF2).
?NSLR2 := postLinkReceiptForDataset("someUser", "someProject", $DataSet, $WF2).

// Data Provider (Presidio): check access
?Self := $DP.
access($DataSet, "someUser", $NSV, "someProject" )?


**************************************************************************************************************
SPLIT EXAMPLE

This is exactly the same as the mvp.slang demo, EXCEPT:

- We split up mvp.slang into separate scripts for the four principals.
- We run four separate safe-servers, one for each principal, serving on different ports, and loaded with the right script.
- (Of course all the safe-servers use the same Riak K/V store.)
- We run four separate slang-shells, one for each principal, pointed at the corresponding safe-server.
- Each slang-shell receives only the commands for the corresponding principal.

In the unified example (using mvp.slang), all of the principals share a slang-shell with its variables.  Various keyhashes
and scids are saved in shared slang-shell variables.  But when we run the split example, we must manage out-of-band
communication of certains keyhashes and scids among the principals.  This is well-understood in planning for the
real-world scenario.

- DSO must know the scids of the workflows WF1 and WF2 that it requires for its policy.
- NS must know the scid for each workflow it handles, and the $DataSet scid that the user will request.
- Presidio must know the $DataSet scid (from its filesystem) and the $NS keyhash (from a JWT).

SO: you must cut-and-paste these values in at the command blocks labeled "Stuff we just have to know."
The values are deterministic and repeatable, but they depend on the keypair directory.  Since every developer
generates their own keypairs, cut-and-pasting is required at least once when you run the scenario for the
first time on a new keypair directory.


1. Run four safe-servers, from four separate shells, with four different trust scripts, serving on four different ports:

sbt "project safe-server" "run -f ../safe-apps/impact/mvp-wp.slang -r safeService  -hp 7778 -kd  ~/safe-scratch/principalkeys"
sbt "project safe-server" "run -f ../safe-apps/impact/mvp-dso.slang -r safeService  -hp 7779 -kd  ~/safe-scratch/principalkeys"
sbt "project safe-server" "run -f ../safe-apps/impact/mvp-ns.slang -r safeService  -hp 7780 -kd  ~/safe-scratch/principalkeys"
sbt "project safe-server" "run -f ../safe-apps/impact/mvp-presidio.slang -r safeService  -hp 7781 -kd  ~/safe-scratch/principalkeys"

WP
--------------------------------------------
sbt "project safe-lang" "run"
import("safe-apps/impact/mvp-client.slang").

?ServerJVM := "localhost:7778".

?Self := "strong-1".
?WP := postRawIdSet("strong-1").

?UUID1 := "6ec7211c-caaf-4e00-ad36-0cd413accc91".
?UUID2 := "1b924687-a317-4bd7-a54f-a5a0151f49d3".
?WF1 := "$WP:$UUID1".
?WF2 := "$WP:$UUID2".

// Workflow Publisher: post completion rules for workflows
?Self := $WP.
postPerFlowRule($WF1).
postPerFlowRule($WF2).
--------------------------------------------

DSO
--------------------------------------------
sbt "project safe-lang" "run"
import("safe-apps/impact/mvp-client.slang").
?ServerJVM := "localhost:7779".

?Self := "strong-2". 
?DSO := postRawIdSet("strong-2"). 

//Stuff we just have to know. 
// Note that MVP v.0 WP==DSO. 
?WF1 := 'EhSrk2CTCo5LMmsKkgiVny-mATsOqccTQFBo8IS2mqI=:6ec7211c-caaf-4e00-ad36-0cd413accc91'.
?WF2 := 'EhSrk2CTCo5LMmsKkgiVny-mATsOqccTQFBo8IS2mqI=:1b924687-a317-4bd7-a54f-a5a0151f49d3'.

?UUID3 := "26dbc728-3c8d-4433-9c4b-2e065b644db5".
?DataSet := "$DSO:$UUID3".

// Data Set Owner: post policy for dataset access
?Self := $DSO.
postTwoFlowDataOwnerPolicy($DataSet, $WF1, $WF2).
--------------------------------------------

NS
--------------------------------------------
sbt "project safe-lang" "run"
import("safe-apps/impact/mvp-client.slang").
?ServerJVM := "localhost:7780".

?Self := "strong-3". 
?NSV := postRawIdSet("strong-3"). 

//Stuff we just have to know.
// Note that these WF IDs will be baked into workflow templates.
// Dataset ID is known to NS from dataset registration
?WF1 := 'EhSrk2CTCo5LMmsKkgiVny-mATsOqccTQFBo8IS2mqI=:6ec7211c-caaf-4e00-ad36-0cd413accc91'.
?WF2 := 'EhSrk2CTCo5LMmsKkgiVny-mATsOqccTQFBo8IS2mqI=:1b924687-a317-4bd7-a54f-a5a0151f49d3'.
?DataSet := 'garxNsw58U-LSalBsGkmFg7pjqer5A7-VVXIH5ySJ7M=:26dbc728-3c8d-4433-9c4b-2e065b644db5'.

postCommonCompletionReceipt("someProject", $WF1).
postUserCompletionReceipt("someUser", "someProject", $WF1).
postLinkReceiptForDataset("someUser", "someProject", $DataSet, $WF1).
postCommonCompletionReceipt("someProject", $WF2).
postUserCompletionReceipt("someUser", "someProject", $WF2).
postLinkReceiptForDataset("someUser", "someProject", $DataSet, $WF2).

--------------------------------------------


Presidio
--------------------------------------------
sbt "project safe-lang" "run"
import("safe-apps/impact/mvp-client.slang").
?ServerJVM := "localhost:7781".

//Stuff we just have to know.
// NSV comes from JWT passed by NS
// Dataset ID comes from JWT passed by NS
?NSV := 'JNnJckkhcz8YF-t_IPoPj1O5dWioGBfY5-uML5KheKc='.
?DataSet := 'garxNsw58U-LSalBsGkmFg7pjqer5A7-VVXIH5ySJ7M=:26dbc728-3c8d-4433-9c4b-2e065b644db5'.

?Self := "strong-4".
access($DataSet, "someUser", $NSV, "someProject" )?

--------------------------------------------












